#todo : 阻止無限進版號
# circleCI 版本
version: 2.1 

orbs:
  android: circleci/android@2.0
  email: cinotify/email@1.2.1
  slack: circleci/slack@4.9.3
  circleci-cli: circleci/circleci-cli@0.1.9  

# 定義工作流程
workflows:
  # 定義一個名為build-apk-workflow 的工作流程
  build-apk-workflow:
    jobs:
      - build: # 執行名為build的工作
          context: slack-secrets #slack的 token

# jobs是建立工作環境的集合
jobs:
  # 名稱為build的工作流程
  build:
    # 設定docker執行環境
    docker:
      - image: cimg/android:2023.08 #指定android 映象檔

    # executor:
    #   name: android/android-machine
    #   resource-class: large
    #   tag: 2021.10.1
    # 確保路徑是相同的 可先執行pwd 
    environment: #確保自己產的keyStore所用加密法在circleci環境主機存在 
              KEYSTORE_FILE: /home/circleci/project/app/MyKeyStore/keyStore #確保keyStore不會外流 ex:git觀看權限
              KEYSTORE_PASSWORD: rfe666
              KEY_ALIAS: KotlinTutorialKey
              KEY_PASSWORD: rfe666
              MY_VERSION_NAME: ""
              MY_NEW_VERSION_NAME: ""
              MY_COMMIT_MSG: ""
 
    steps:
      - checkout

      # 使用密鑰將指紋新增 add_ssh_keys
      # 以供circleCI驗證
      - add_ssh_keys:
          fingerprints:
            - "SO:ME:FIN:G:ER:PR:IN:T"
      
      - run: 
          name: 檢查是否為進版號的commit
          command: |
            myCommitMsg=$(git log -1 --pretty=format:"%s") 
            if [[ $myCommitMsg =~ \[VersionUp\] ]]; then
              echo "**** is version up ****"
              curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"
            else
              - show-text
            fi

      - run: java --version
      - run:
          name: Set execute permission for gradlew
          command: chmod +x gradlew  # 設定執行權限
      
      # 抓app版本名稱 輸出MY_VERSION_NAME 作為變數
      # grep 'versName' gradle.properties 擷取從gradle.properties 含有 versName的字串
      - run:
          name: Set version name
          command: |
            myVersionName=$(grep 'versName' gradle.properties)
            echo "MY_VERSION_NAME=$myVersionName" >> $BASH_ENV
      # 登入的流程要走到讀取環境變數 ex: mac的.bash_profile檔案 紀錄環境變數供主機使用
      # >> $BASH_ENV 相當於寫入至.bash_profile 最後一行
      # > $BASH_ENV 等於覆蓋掉所有.bash_profile 內容

      #印出近10筆commit訊息
      - run:
          name: Print commit messages
          command: |
            myCommitMsg=$(git log -10 --pretty=format:"%s")
            echo "${myCommitMsg}"

      - up-version-name
      - replace-version-name

      # 印出推送的目標分支 
      # - run:
      #     name: print now branch
      #     command: echo "${CIRCLE_BRANCH}"

      # - run: gradle --version
      # - run:
      #     name: Set CircleCI Environment Variable
      #     command: |
      #       export VERSION_NAME=$(./gradlew getVersionName | tail -n 1)
      #       echo "export VERSION_NAME='${VERSION_NAME}'" >> $BASH_ENV
      #       source $BASH_ENV

      # - run:
      #     name: Download Dependencies # 確保項目的依賴庫是否正確,確保在不同環境都能編譯
      #     command: ./gradlew androidDependencies
      # - save_cache: #將gradle結果暫存至circleCI快取中 如果沒有變化就不需要重新下載和解析依賴庫
      #     paths:
      #       - ~/.gradle
      #     key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      # - build-debug-apk
      # - build-debug-aab
      # - build-release-apk
      # - build-release-aab

commands:
  show-text:
    steps:
      - run:
          name: test run
          command: echo print test
  build-debug-apk:
    steps:
      - run:
          name: Build APK
          command: ./gradlew assembleDebug #建構debug版本apk
      - store_artifacts:
          path: app/build/outputs/apk/debug/app-debug.apk
          destination: app-debug-testName.apk

  build-debug-aab: 
    steps:
      - run:
          name: Build Debug AAB
          command: ./gradlew bundleDebug #建構debug版本aab
      
      - store_artifacts:
          path: app/build/outputs/bundle/debug/app-debug.aab
          destination: debug-app-testName.aab

 #建構release版本apk
  build-release-apk:
    steps:
      - run:
          name: Build Release APK
          command: ./gradlew assembleRelease 
              -Pandroid.injected.signing.store.file=$KEYSTORE_FILE
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD
      - run:
          name: ls app/build/outputs/apk/release/ 
          command: ls app/build/outputs/apk/release/
      - run:
          name: Rename APK
          command: mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/app-release-${MY_VERSION_NAME}.apk
      - run:
          name: ls app/build/outputs/apk/release/
          command: ls app/build/outputs/apk/release/  
      - store_artifacts:
          path: app/build/outputs/apk/release/
          #destination: "app-release-1.5.3.apk"

      - run:
          name: Show version
          command: echo "$MY_VERSION_NAME"

      - set-notify
      # - up-version-name

      - email/send:
          body: 我們的app版本："${MY_VERSION_NAME}" 出版了 連結網址-> https://google.com
          subject: APK包版信
          to: alan.lee@gomaji.com #,s990611@kimo.com
      
      

      #發送成功通知
      # - slack/notify:
      #     event: pass
          # custom: | #自訂
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "text": {
          #         "type": "mrkdwn",
          #         "text": "test ${MY_VERSION_NAME}"
          #       },
          #       "accessory": {
          #         "type": "image",
          #         "image_url": "https://memeprod.ap-south-1.linodeobjects.com/user-gif/106f64689a5bc16e349cf39b2a3f1195.gif",
          #         "alt_text": "calendar thumbnail"
          #         }
          #       }
          #     ]
          #   }
      #     # channel: 'C06EJQLU7EH' #通知多個頻道 ps:預設context頻道不會通知 需再自行加入
      #     branch_pattern: circleci-project-new-setup #限定branch 才顯示
      #     template: success_tagged_deploy_1

      # - run:
      #     post:
      #       - mkdir $CIRCLE_ARTIFACTS/apks
      #       - curl -L -o -gdrive "https://drive.google.com/drive/u/0/folders/1tvjEVYgBeRJipFVMslda3jdPIlrEquqD"; chmod 755 gdrive
      #       - ./gdrive --refresh-token "refresh_token_value" upload --parent "parent_id" app/build/outputs/apk/release/app-release.apk

      # - mailer-orb/mail:
      #     body: |-
      #       Sample Mail
      #       Regards,
      #       Circle CI 
      #     from: test@tt.ty
      #     subject: Example mail from mailer-orb
      #     to: alan.lee@gomaji.com


      # - run: #測試丟apk到drive 
      #     name: Upload APK to Google Drive
      #     command: |
      #       ACCESS_TOKEN=ya29.a0AfB_byC6kmq7D7SZn-s3R09gOHr90huIxlUDXRB2zoRrxWzQmlVlgAXSbwyYxCRkZ9RVC7X5ByLvXdmVJ5sbdoXgECNZoanQl7s49L354yv_vItURuHHGZQO5L4kJsMTyYqSUOnwMqM-j_62HGcbWEXI8gJNT4unGttmmwaCgYKAUcSARASFQHsvYlslhw4PQH1ncIX3hEM6pnEqg0173
      #       FILE_ID="1UDfduQx7jPtw_j0zaVwJiBCR9jt4QV1q"
      #       APK_PATH="app-release-myName.apk"
            
      #       # 建構 HTTP 請求並上傳 APK
      #       curl -X POST \
      #         -H "Authorization: Bearer $ACCESS_TOKEN" \
      #         -F "metadata={name:'app-release-myName.apk'};type=application/json;charset=UTF-8" \
      #         -F "file=@$APK_PATH;type=application/octet-stream" \
      #         "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"

#建構release版本aab 
  build-release-aab:
    steps:
      - run:
          name: Build Release AAB
          command: ./gradlew bundleRelease 
              -Pandroid.injected.signing.store.file=$KEYSTORE_FILE
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD
      - run:
          name: ls app/build/outputs/bundle/release/
          command: ls app/build/outputs/bundle/release       
      - store_artifacts:
          path: app/build/outputs/bundle/release/app-release.aab
          destination: app-release-testName.aab

      # - run:
      #     name: create token
      #     command: firebase login:ci

  set-notify:
    steps:
      #slack 通知發送
      - slack/notify: #呼叫Slack orb 必須的步驟
          custom: | #自訂
            {
              "blocks": [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "Android包版成功",
                        "emoji": true
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": "```Version = Android ${MY_VERSION_NAME}```"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "```Branch = ${CIRCLE_BRANCH}```"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "```Download = ${CIRCLE_BUILD_URL}```"
                        }
                    ],
                    "accessory": {
                        "type": "image",
                        "image_url": "https://media1.tenor.com/m/zCrMy3G0X4YAAAAd/slap-slapping.gif",
                        "alt_text": "calendar thumbnail"
                    }
                }
              ]
            }
          event: pass #僅成功才發送 always = 不論成功失敗都會發送

        #失敗時的通知
      - slack/notify:
          event: fail
          mentions: '@AlanLee'
          template: basic_fail_1

  up-version-name:
    steps:
      # 去除小數點後+1
      # input 為 3位數 -> 111 to 1.1.1
      # 4位數 -> 1111 -> 11.1.1
      # eles -> 印出版號錯誤 並終止後面的 job
      # 將結果存入環境變數 MY_NEW_VERSION_NAME內
      - run:
          name: Increment Version name
          command: |
            version_number_int=$(echo $MY_VERSION_NAME | sed 's/\.//g')
            let version_number_int+=1

            if [ ${#version_number_int} -eq 3 ]; then
              new_version_name=$(echo "$version_number_int" | sed 's/\(.\)\(.\)\(.\)/\1.\2.\3/g')
            elif [ ${#version_number_int} -eq 4 ]; then
              new_version_name=$(echo "$version_number_int" | sed 's/\(.\)\(.\)\(.\)\(.\)/\1\2.\3.\4/')
            else
              echo "**** Version Name Error ****" 
              exit 0
            fi

            echo MY_NEW_VERSION_NAME=$new_version_name >> $BASH_ENV
    
      - run:
          name: Print New Version Name
          command: echo "new version name = ${MY_NEW_VERSION_NAME}"

  replace-version-name:
      steps:
        # gradle.properties檔
        - run:
            name: Replace versionName
            command: |
              sudo sed -i "s/versName=.*/versName=${MY_NEW_VERSION_NAME}/g" gradle.properties

        # git add . -> 變更移至暫存區域 ex: fork的staged區 此時尚未commit
        # git commit -> 將暫存區的變更提交 -m 設定訊息      
        - run:
            name: Commit changes
            command: |
              git config user.email "s990611@kimo.com"
              git config user.name "AlanCircleCI"
              git add .
              git commit -m "[VersionUp] Update versionName to ${MY_NEW_VERSION_NAME}"
 
        - run:
            name: Push changes
            command: |
              git push origin HEAD:${CIRCLE_BRANCH}
